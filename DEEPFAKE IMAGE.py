# -*- coding: utf-8 -*-
"""Untitled6ntcmplted.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ObQ8ffBgeVR_uKCaQzC1TXQL0SzmrT7W
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d manjilkarki/deepfake-and-real-images

import zipfile
zip_ref=zipfile.ZipFile('/content/deepfake-and-real-images.zip','r')
zip_ref.extractall('/content')
zip_ref.close()

!pip install tensorflow
import os
import numpy as np
import cv2
from sklearn import svm
from sklearn.metrics import accuracy_score
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import VGG16
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Flatten, Dense, Dropout

# Define constants
IMAGE_SIZE = (224, 224)
BATCH_SIZE = 32
EPOCHS = 10

# Define data directories
train_dir = '/content/Dataset/Train'
validation_dir = '/content/Dataset/Validation'
test_dir = '/content/Dataset/Test'

# Data preprocessing and augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

validation_datagen = ImageDataGenerator(rescale=1./255)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

# Load pre-trained VGG16 model
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze convolutional layers
for layer in base_model.layers:
    layer.trainable = False

# Build hybrid CNN-SVM model
model = Sequential([
    base_model,
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // BATCH_SIZE,
    epochs=EPOCHS,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // BATCH_SIZE
)



train_features = base_model.predict(train_generator, batch_size=32)
validation_features = base_model.predict(validation_generator, batch_size=32)

# Flatten features
train_features_flat = train_features.reshape(train_features.shape[0], -1)
validation_features_flat = validation_features.reshape(validation_features.shape[0], -1)

svm_classifier = svm.SVC(kernel='linear')
svm_classifier.fit(train_features_flat, train_generator.classes)

# Evaluate the model
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary'
)

test_features = base_model.predict(test_generator)
test_features_flat = test_features.reshape(test_features.shape[0], -1)

predictions = svm_classifier.predict(test_features_flat)
accuracy = accuracy_score(test_generator.classes, predictions)
print("Test Accuracy:", accuracy)

# Evaluate the model on the test set
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=IMAGE_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    shuffle=False  # set shuffle to False to keep track of predictions
)

# Save the model
model.save("hybrid_model.h5")
print("Model saved successfully.")

import keras
import numpy as np
from tensorflow.keras.preprocessing import image

# Define a function to preprocess input image
def preprocess_image(image_path):
    img = image.load_img(image_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    return img_array

# Load the saved model
model = keras.models.load_model("hybrid_model.h5")

# Test with a single image
image_path = "/content/temp.jpg"
preprocessed_image = preprocess_image(image_path)

# Get prediction
prediction = model.predict(preprocessed_image)

# Interpret prediction
if prediction < 0.5:
    print("The model predicts this image belongs to class fake.")
else:
    print("The model predicts this image belongs to class real.")

import matplotlib.pyplot as plt

# Get the accuracy and validation accuracy from the history object
accuracy = HISTORY.history['accuracy']
val_accuracy = HISTORY.history['val_accuracy']

# Get the number of epochs
epochs = range(1, len(accuracy) + 1)

# Plot accuracy
plt.plot(epochs, accuracy, 'bo', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()